// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NodleSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import BackgroundTasks
import CommonCrypto
import CoreBluetooth
import CoreFoundation
import CoreLocation
import CryptoKit
import Foundation
@_exported import NodleSDK
import Swift
import SwiftCBOR
import SwiftProtobuf
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class NodleDispatcher {
  public func showConfig() -> Swift.String
  public func config(path: Swift.String)
  public func config<T>(key: Swift.String, value: T)
  public func isStarted() -> Swift.Bool
  public func isScanning() -> Swift.Bool
  public func getHeartbeats() -> Swift.Array<(any NodleSDK.NodleHeartbeatRecord)?>?
  public func getH3() -> (any NodleSDK.H3)?
  public func stop()
  public func clear()
  public func getMetric(which: NodleSDK.SdkMetricType) -> Swift.Int64
  public func getVersion() -> Swift.String
  public func getEvents(upstream: @escaping (any NodleSDK.NodleEvent) -> Swift.Void)
  public func start(devKey: Swift.String, tags: Swift.String...)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodleHeartbeatScanRecord : NodleSDK.NodleHeartbeatRecord, Swift.CustomStringConvertible {
  public var id: Swift.Int64?
  public var timestamp: Swift.UInt64?
  public var timezone: Swift.Int?
  public var locationH3: Swift.String?
  public var geoHash: Swift.String?
  public var isBlePermissionsGranted: Swift.Bool?
  public var isLocPermissionsGranted: Swift.Bool?
  public var isWifiEnabled: Swift.Bool?
  public var isCellEnabled: Swift.Bool?
  public var isBluetoothEnabled: Swift.Bool?
  public var sdkVersion: Swift.String?
  public var configVersion: Swift.String?
  public var os: Swift.String?
  public var phone: Swift.String?
  public var release: Swift.String?
  public var api: Swift.String?
  public var hardware: Swift.String?
  public var appName: Swift.String?
  public var battery: Swift.Int?
  public var charging: Swift.Bool?
  public var appInForeground: Swift.Bool?
  public var phoneStorageTotal: Swift.String?
  public var phoneStorageAvailable: Swift.String?
  public var sdkStorage: Swift.String?
  public var httpIn: Swift.String?
  public var httpOut: Swift.String?
  public var bundleRxCount: Swift.Int?
  public var bundleTxCount: Swift.Int?
  public var bleScanSuccess: Swift.Int?
  public var bleScanFailed: Swift.Int?
  public var blePayloadCount: Swift.Int?
  public var buildType: Swift.String?
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AbstractSecurityParameter {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AbstractSecurityResult {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodleBluetoothEvent {
  public var type: NodleSDK.NodleEventType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodleBeaconRecord {
  public var type: NodleSDK.NodleEventType
  public var identifier: Swift.String
  public var major: Foundation.NSNumber
  public var minor: Foundation.NSNumber
  public var proximity: Swift.Int
  public var accuracy: Swift.Double
  public var rssi: Swift.Int
  public var timestamp: Foundation.Date
  @objc deinit
}
public let HTTP_OK: Swift.Int
public let HTTP_ACCEPTED: Swift.Int
public let HTTP_BAD_REQUEST: Swift.Int
public let HTTP_UNAUTHORIZED: Swift.Int
@_hasMissingDesignatedInitializers public class WGS84Point {
  @objc deinit
}
public class BoundingBox {
  public init(southLatitude: Swift.Double, northLatitude: Swift.Double, westLongitude: Swift.Double, eastLongitude: Swift.Double)
  @objc deinit
}
infix operator >>> : BitwiseShiftPrecedence
@_hasMissingDesignatedInitializers public class NodleBluetoothRecord {
  public var type: NodleSDK.NodleEventType
  public var device: Swift.String
  public var rssi: Swift.Int
  public var bytes: [Swift.UInt8]?
  public var manufacturerSpecificData: [Swift.Int : [Swift.UInt8]]?
  public var serviceUuids: Swift.Array<CoreBluetooth.CBUUID>?
  @objc deinit
}
public protocol NodleEvent {
  var type: NodleSDK.NodleEventType { get }
}
public protocol NodleHeartbeatRecord {
  var id: Swift.Int64? { get }
  var timestamp: Swift.UInt64? { get }
  var timezone: Swift.Int? { get }
  var locationH3: Swift.String? { get }
  var geoHash: Swift.String? { get }
  var isBlePermissionsGranted: Swift.Bool? { get }
  var isLocPermissionsGranted: Swift.Bool? { get }
  var isWifiEnabled: Swift.Bool? { get }
  var isCellEnabled: Swift.Bool? { get }
  var isBluetoothEnabled: Swift.Bool? { get }
  var sdkVersion: Swift.String? { get }
  var configVersion: Swift.String? { get }
  var os: Swift.String? { get }
  var phone: Swift.String? { get }
  var release: Swift.String? { get }
  var api: Swift.String? { get }
  var hardware: Swift.String? { get }
  var appName: Swift.String? { get }
  var battery: Swift.Int? { get }
  var charging: Swift.Bool? { get }
  var appInForeground: Swift.Bool? { get }
  var phoneStorageTotal: Swift.String? { get }
  var phoneStorageAvailable: Swift.String? { get }
  var sdkStorage: Swift.String? { get }
  var httpIn: Swift.String? { get }
  var httpOut: Swift.String? { get }
  var bundleRxCount: Swift.Int? { get }
  var bundleTxCount: Swift.Int? { get }
  var bleScanSuccess: Swift.Int? { get }
  var bleScanFailed: Swift.Int? { get }
  var blePayloadCount: Swift.Int? { get }
  var buildType: Swift.String? { get }
}
public typealias NodleLat = Swift.Double
public typealias NodleLng = Swift.Double
public enum H3AreaUnit {
  case KM2
  case M2
  public static func == (a: NodleSDK.H3AreaUnit, b: NodleSDK.H3AreaUnit) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum H3LengthUnit {
  case KM
  case M
  public static func == (a: NodleSDK.H3LengthUnit, b: NodleSDK.H3LengthUnit) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol H3 {
  func h3IsValid(h3: Swift.Int64) -> Swift.Bool
  func h3IsValid(h3Address: Swift.String) -> Swift.Bool
  func h3GetBaseCell(h3: Swift.Int64) -> Swift.Int
  func h3GetBaseCell(h3Address: Swift.String) -> Swift.Int
  func h3IsPentagon(h3: Swift.Int64) -> Swift.Bool
  func h3IsPentagon(h3Address: Swift.String) -> Swift.Bool
  func geoToH3(lat: Swift.Double, lng: Swift.Double, res: Swift.Int) -> Swift.Int64
  func geoToH3Address(lat: Swift.Double, lng: Swift.Double, res: Swift.Int) -> Swift.String
  func h3ToGeo(h3: Swift.Int64) -> (NodleSDK.NodleLat, NodleSDK.NodleLng)
  func h3ToGeo(h3Address: Swift.String) -> (NodleSDK.NodleLat, NodleSDK.NodleLng)
  func h3ToGeoBoundary(h3: Swift.Int64) -> Swift.Array<(NodleSDK.NodleLat, NodleSDK.NodleLng)>
  func h3ToGeoBoundary(h3Address: Swift.String) -> Swift.Array<(NodleSDK.NodleLat, NodleSDK.NodleLng)>
  func kRing(h3Address: Swift.String, k: Swift.Int) -> Swift.Array<Swift.String?>?
  func kRing(h3Index: Swift.Int64, k: Swift.Int) -> Swift.Array<Swift.Int64>
  func h3Distance(a: Swift.String, b: Swift.String) -> Swift.Int
  func h3Distance(a: Swift.Int64, b: Swift.Int64) -> Swift.Int
  func h3Line(startAddress: Swift.String, endAddress: Swift.String) -> Swift.Array<Swift.String?>?
  func h3Line(start: Swift.Int64, end: Swift.Int64) -> Swift.Array<Swift.Int64>
  func h3GetResolution(h3Address: Swift.String) -> Swift.Int
  func h3GetResolution(h3: Swift.Int64) -> Swift.Int
  func h3ToString(index: Swift.Int64) -> Swift.String?
  func stringToH3(h3Address: Swift.String) -> Swift.Int64
  func numHexagons(res: Swift.Int) -> Swift.Int64
}
public enum NodleEventType : Swift.Int {
  case BlePayloadEvent
  case BleStartSearching
  case BleStopSearching
  case BeaconPayloadEvent
  case BeaconStartSeaching
  case BeaconStopSearching
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Nodle : NodleSDK.NodleDispatcher {
  public static let sharedInstance: NodleSDK.Nodle
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodleBeaconEvent {
  public var type: NodleSDK.NodleEventType
  @objc deinit
}
extension Foundation.UUID {
  public func toUInt8Array() -> [Swift.UInt8]
}
extension Swift.Array where Element : Swift.Hashable {
  public func uniqued() -> [Element]
}
extension Swift.Sequence where Self.Element : Swift.Hashable {
  public func contains(_ elements: [Self.Element]) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NodleLocationManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public static let sharedInstance: NodleSDK.NodleLocationManager
  public var location: CoreLocation.CLLocation?
  public var triggerRestart: ((Swift.Bool) -> Swift.Void)?
  public var checkPermissions: Swift.Bool {
    get
  }
  public var hasBackgroundCapabilities: Swift.Bool {
    get
  }
  public func restartNodleInTerminatedState(trigger: @escaping (Swift.Bool?) -> Swift.Void)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc deinit
}
public enum SdkMetricType : Swift.Int, Swift.CustomStringConvertible {
  case BleScanCount
  case DtnTxCount
  case DtnRxCount
  case DtnForwardedCount
  case DtnDeliveredCount
  case BlePermissionGranted
  case LocPermissionGranted
  case BleEnabled
  case WifiEnabled
  case CellEnabled
  case BatteryCharging
  case AppInForeground
  case Location
  case TimeZone
  case SdkVersion
  case ConfigVersion
  case OsName
  case PhoneModel
  case Release
  case ApiLevel
  case Hardware
  case AppName
  case BatteryLevel
  case PhoneStorageAvailable
  case PhoneStorageTotal
  case SdkStorage
  case HTTPIn
  case HTTPOut
  case BleScanSuccess
  case BleScanFailed
  case GeoHash
  case DeveloperMode
  case BuildType
  case MetricUnknown
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NodleSDK.NodleBluetoothEvent : NodleSDK.NodleEvent {}
extension NodleSDK.NodleBeaconRecord : NodleSDK.NodleEvent {}
extension NodleSDK.NodleBluetoothRecord : NodleSDK.NodleEvent {}
extension NodleSDK.H3AreaUnit : Swift.Equatable {}
extension NodleSDK.H3AreaUnit : Swift.Hashable {}
extension NodleSDK.H3LengthUnit : Swift.Equatable {}
extension NodleSDK.H3LengthUnit : Swift.Hashable {}
extension NodleSDK.NodleEventType : Swift.Equatable {}
extension NodleSDK.NodleEventType : Swift.Hashable {}
extension NodleSDK.NodleEventType : Swift.RawRepresentable {}
extension NodleSDK.NodleBeaconEvent : NodleSDK.NodleEvent {}
extension NodleSDK.SdkMetricType : Swift.Equatable {}
extension NodleSDK.SdkMetricType : Swift.Hashable {}
extension NodleSDK.SdkMetricType : Swift.RawRepresentable {}
